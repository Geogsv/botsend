# --- Этап сборки ---
# Используем Alpine-версию Go для меньшего размера образа
FROM golang:1.21-alpine AS builder

# Устанавливаем рабочую директорию
WORKDIR /app

# Копируем файлы зависимостей
COPY go.mod go.sum ./

# Скачиваем зависимости (использует кеш Docker)
# Пропускаем проверку go.mod, если нужно ускорить сборку в некоторых случаях
RUN go mod download -x || go mod download

# Копируем весь исходный код
COPY . .

# Собираем Go приложение
# Замените <ваш_путь_модуля> на ваш реальный путь модуля (из go.mod)
# CGO_ENABLED=0 - для статической линковки (важно для Alpine)
# -ldflags="-s -w" - для уменьшения размера бинарника (удаляет отладочную информацию)
RUN CGO_ENABLED=0 GOOS=linux go build -ldflags="-s -w" -o relaybot ./cmd/relaybot/main.go

# --- Этап выполнения ---
FROM alpine:latest

# Устанавливаем рабочую директорию
WORKDIR /app

# Копируем только скомпилированный бинарник из этапа сборки
COPY --from=builder /app/relaybot .

# Копируем .env файл, если он есть (хотя лучше монтировать или использовать env_file в docker-compose)
# COPY .env .

# Указываем, что контейнер будет слушать какой-то порт (если бы это был веб-сервер)
# В данном случае боту это не нужно, но оставляем для информации
# EXPOSE 8080

# Команда для запуска приложения при старте контейнера
# Запускаем наш скомпилированный бинарник
CMD ["./relaybot"]